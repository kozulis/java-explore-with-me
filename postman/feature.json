{
	"info": {
		"_postman_id": "b5a1d9f8-972a-4386-9e99-d90ff622cbb8",
		"name": "Test ewm feature subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28809408"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Добавление пользователя user136",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user1@user.com\",\r\n    \"name\" : \"user136\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя user137",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user2@user.com\",\r\n    \"name\" : \"user137\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя user138",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user3@user.com\",\r\n    \"name\" : \"user138\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categoties",
			"item": [
				{
					"name": "Добавление категории 121",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"category121\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление категории 122",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"category122\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление категории 123",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"category123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Добавление события 106 от пользователя 137 категория 121",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"event106 annotation for test.\",\r\n    \"category\": 121,\r\n    \"description\": \"event106 description for test.\",\r\n    \"eventDate\": \"2023-10-01 20:01:00\",\r\n        \"location\": {\r\n        \"lat\": 11.1111,\r\n        \"lon\": -111.1111\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": true,\r\n    \"title\": \"event106 title.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление статуса события 106 PUBLISHED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/events/:eventId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "106"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события 107 от пользователя 137 категория 122",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"event107 annotation for test.\",\r\n    \"category\": 2,\r\n    \"description\": \"event107 description for test.\",\r\n    \"eventDate\": \"2023-10-01 20:02:00\",\r\n        \"location\": {\r\n        \"lat\": 12.1111,\r\n        \"lon\": -112.1111\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": true,\r\n    \"title\": \"event107 title.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление события 107 от пользователя 137 категория 123",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"annotation\": \"event107 annotation for test.\",\r\n    \"category\": 3,\r\n    \"description\": \"event107 description for test.\",\r\n    \"eventDate\": \"2023-10-01 20:03:00\",\r\n        \"location\": {\r\n        \"lat\": 13.1111,\r\n        \"lon\": -113.1111\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,\r\n    \"requestModeration\": true,\r\n    \"title\": \"event107 title.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/:userId/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "Добавление подписки1 от user136 на user137",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подписка должна содержать поля: id, initiator, userForSubscribe, status\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('userForSubscribe');\r",
									"pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"При добавлении подписки должен быть статус WAITING\" , function () {\r",
									"    pm.expect(target.status).equal(\"WAITING\")\r",
									"});\r",
									"\r",
									"pm.test(\"Поле id не должно быть пустым\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки2 от user136 на user138",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подписка должна содержать поля: id, initiator, userForSubscribe, status\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('userForSubscribe');\r",
									"pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"При добавлении подписки должен быть статус WAITING\" , function () {\r",
									"    pm.expect(target.status).equal(\"WAITING\")\r",
									"});\r",
									"\r",
									"pm.test(\"Поле id не должно быть пустым\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "138"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки3 от user138 на user137",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подписка должна содержать поля: id, initiator, userForSubscribe, status\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('userForSubscribe');\r",
									"pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"При добавлении подписки должен быть статус WAITING\" , function () {\r",
									"    pm.expect(target.status).equal(\"WAITING\")\r",
									"});\r",
									"\r",
									"pm.test(\"Поле id не должно быть пустым\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "138"
								},
								{
									"key": "userForSubscribeId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки от user200 на user2 notfound error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "200"
								},
								{
									"key": "userForSubscribeId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки от user136 на user200 notfound error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление подписки от user136 на user136 conflict error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "136"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление повторной подписки от user136 на user137 conflict error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписок user200 notfound error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription"
							],
							"variable": [
								{
									"key": "userId",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписок user136 с любым статусом",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подборка должна содержать поля: id, userForSubscribe, status\", function () {\r",
									"    pm.expect(target[0]).to.have.all.keys('id', 'userForSubscribe', 'status');\r",
									"    pm.expect(target[1]).to.have.all.keys('id', 'userForSubscribe', 'status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле id не должно быть пустым\", function () {\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[1].id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Длина списка должна быть равна 2\", function() {\r",
									"    pm.expect(target.length).to.equal(2)\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'userForSubscribe.name' [0]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].userForSubscribe.name, '\"initiator.name\"  должен быть \"user137\"').to.eql(\"user137\");\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'userForSubscribe.name' [1]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].userForSubscribe.name, '\"initiator.name\"  должен быть \"user138\"').to.eql(\"user138\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение user136 wrong subscriptionId notfound error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:subscriptionId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":subscriptionId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "subscriptionId",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение user136 подписки1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подписка должна содержать поля: id, initiator, userForSubscribe, status\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('userForSubscribe');\r",
									"pm.expect(target).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'initiator.name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.initiator.name, '\"initiator.name\"  должен быть \"user136\"').to.eql(\"user136\");\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'userForSubscribe.name'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userForSubscribe.name, '\"userForSubscribe.name\"  должен быть \"user137\"').to.eql(\"user137\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:subscriptionId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":subscriptionId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "subscriptionId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение user136 списка евентов от user136 conflict error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId",
								"event"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "136"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение user136 списка евентов от user137 NOT CONFIRMED badrequest error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId",
								"event"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение user137 списка подписчиков",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подборка должна содержать поля: id, initiator, status\", function () {\r",
									"    pm.expect(target[0]).to.have.all.keys('id', 'initiator', 'status');\r",
									"    pm.expect(target[1]).to.have.all.keys('id', 'initiator', 'status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле id не должно быть пустым\", function () {\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"    pm.expect(target[1].id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Длина списка должна быть равна 2\", function() {\r",
									"    pm.expect(target.length).to.equal(2)\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'initiator.name' [0]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].initiator.name, '\"initiator.name\"  должен быть \"user136\"').to.eql(\"user136\");\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'initiator.name' [1]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1].initiator.name, '\"initiator.name\"  должен быть \"user138\"').to.eql(\"user138\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/subscribers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								"subscribers"
							],
							"variable": [
								{
									"key": "userId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение user137 статуса для подписки2 conflict error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/subscribers/:subscriptionId?status=CONFIRMED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								"subscribers",
								":subscriptionId"
							],
							"query": [
								{
									"key": "status",
									"value": "CONFIRMED"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "137"
								},
								{
									"key": "subscriptionId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение user137 статуса для подписки1 от user136 на WAITING colflict error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/subscribers/:subscriptionId?status=WAITING",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								"subscribers",
								":subscriptionId"
							],
							"query": [
								{
									"key": "status",
									"value": "WAITING"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "137"
								},
								{
									"key": "subscriptionId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение user137 статуса для подписки1 от user136 на CONFIRMED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/subscribers/:subscriptionId?status=CONFIRMED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								"subscribers",
								":subscriptionId"
							],
							"query": [
								{
									"key": "status",
									"value": "CONFIRMED"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "137"
								},
								{
									"key": "subscriptionId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписок user136 со статусом CONFIRMED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ответ должен содержать поля: id, userForSubscribe, status\", function () {\r",
									"    pm.expect(target[0]).to.have.all.keys('id', 'userForSubscribe', 'status');\r",
									"});\r",
									"\r",
									"pm.test(\"Длина списка должна быть равна 1\", function() {\r",
									"    pm.expect(target.length).to.equal(1)\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'userForSubscribe.name' [0]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].userForSubscribe.name, '\"userForSubscribe.name\"  должен быть \"user137\"').to.eql(\"user137\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription?status=CONFIRMED",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription"
							],
							"query": [
								{
									"key": "status",
									"value": "CONFIRMED"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение user136 списка евентов от user137 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"// pm.test(\"Ответ должен содержать поля: id, userForSubscribe, status\", function () {\r",
									"//     pm.expect(target[0]).to.have.all.keys('id', 'userForSubscribe', 'status');\r",
									"// });\r",
									"\r",
									"pm.test(\"Длина списка должна быть равна 1\", function() {\r",
									"    pm.expect(target.length).to.equal(1)\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'annotation' [0]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].annotation, '\"annotation\"  должно быть \"event106 annotation for test.\"').to.eql(\"event106 annotation for test.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'initiator' [0]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].initiator.name, '\"initiator.name\" должно быть \"user137\"').to.eql(\"user137\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:userForSubscribeId/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":userForSubscribeId",
								"event"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "userForSubscribeId",
									"value": "137"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление user136 wrong subscriptionId notfound error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:subscriptionId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":subscriptionId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "subscriptionId",
									"value": "45"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление user136 wrong subscriptionId conflict error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:subscriptionId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":subscriptionId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "subscriptionId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление user136 подписки1 SUCCESSFUL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:subscriptionId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":subscriptionId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "subscriptionId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение user136 подписки1 notfound error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription/:subscriptionId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription",
								":subscriptionId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								},
								{
									"key": "subscriptionId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение списка подписок user136 с любым статусом must be 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Подборка должна содержать поля: id, userForSubscribe, status\", function () {\r",
									"    pm.expect(target[0]).to.have.all.keys('id', 'userForSubscribe', 'status');\r",
									"});\r",
									"\r",
									"pm.test(\"Поле id не должно быть пустым\", function () {\r",
									"    pm.expect(target[0].id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Длина списка должна быть равна 1\", function() {\r",
									"    pm.expect(target.length).to.equal(1)\r",
									"});\r",
									"\r",
									"pm.test(\"Проверка поля 'userForSubscribe.name' [0]\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].userForSubscribe.name, '\"initiator.name\"  должен быть \"user138\"').to.eql(\"user138\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/:userId/subscription",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								":userId",
								"subscription"
							],
							"variable": [
								{
									"key": "userId",
									"value": "136"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}